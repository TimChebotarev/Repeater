{"version":3,"sources":["utils.js","App.js","serviceWorker.js","index.js"],"names":["recordAudio","Promise","resolve","a","navigator","mediaDevices","getUserMedia","audio","stream","mediaRecorder","MediaRecorder","audioChunks","addEventListener","event","push","data","stop","console","log","audioBlob","Blob","audioUrl","URL","createObjectURL","Audio","play","state","length","start","recognition","window","SpeechRecognition","webkitSpeechRecognition","finalTranscript","isStarted","onUpdateCallback","speechRecognition","lang","interimResults","maxAlternatives","continuous","onresult","interimTranscript","i","resultIndex","len","results","transcript","isFinal","onend","setCallback","callback","App","useState","setTranscript","r","setR","recogn","handlerStart","useCallback","then","handlerStop","onRecognUpdate","final","includes","onended","className","onClick","readOnly","value","isLocalhost","Boolean","location","hostname","match","registerValidSW","swUrl","config","serviceWorker","register","registration","onupdatefound","installingWorker","installing","onstatechange","controller","onUpdate","onSuccess","catch","error","ReactDOM","render","document","getElementById","process","href","origin","fetch","response","contentType","headers","get","status","indexOf","ready","unregister","reload","checkValidServiceWorker"],"mappings":"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","file":"static/js/main.4507ec74.chunk.js","sourcesContent":["/* eslint-disable no-unused-expressions */\nconst recordAudio = () =>\n  new Promise(async resolve => {\n    const stream = await navigator.mediaDevices.getUserMedia({ audio: true });\n    const mediaRecorder = new MediaRecorder(stream);\n    const audioChunks = [];\n\n    mediaRecorder.addEventListener(\"dataavailable\", event => {\n      audioChunks.push(event.data);\n    });\n\n    const start = () => {\n      console.log('record started')\n      mediaRecorder.start();\n    }\n\n    const stop = () =>\n      new Promise(resolve => {\n        mediaRecorder.addEventListener(\"stop\", () => {\n          console.log('record stoped')\n          const audioBlob = new Blob(audioChunks);\n          const audioUrl = URL.createObjectURL(audioBlob);\n          const audio = new Audio(audioUrl);\n          const play = () => audio.play();\n          resolve({ audioBlob, audioUrl, audio, play });\n        });\n\n        if (mediaRecorder.state !== 'inactive')\n          mediaRecorder.stop();\n        audioChunks.length = 0\n      });\n\n    resolve({ start, stop });\n  });\n\n// const sleep = time => new Promise(resolve => setTimeout(resolve, time));\n// (async () => {\n//   const recorder = await recordAudio();\n//   recorder.start();\n//   await sleep(3000);\n//   const audio = await recorder.stop();\n//   audio.play();\n// })();\n\nconst recognition = () => {\n  window.SpeechRecognition = window.webkitSpeechRecognition || window.SpeechRecognition;\n  let finalTranscript = '', isStarted = false, onUpdateCallback = () => { };\n  let speechRecognition = new window.SpeechRecognition();\n  speechRecognition.lang = 'ru-RU';\n  speechRecognition.interimResults = true;\n  speechRecognition.maxAlternatives = 10;\n  speechRecognition.continuous = true;\n  speechRecognition.onresult = (event) => {\n    let interimTranscript = '';\n    for (let i = event.resultIndex, len = event.results.length; i < len; i++) {\n      let transcript = event.results[i][0].transcript;\n      if (event.results[i].isFinal) {\n        finalTranscript += transcript;\n      } else {\n        interimTranscript += transcript;\n      }\n    }\n    // document.querySelector('body').innerHTML = finalTranscript + '<i style=\"color:#ddd;\">' + interimTranscript + '</>';\n    onUpdateCallback(finalTranscript, interimTranscript)\n  }\n\n  speechRecognition.onend = function () {\n    console.log('end')\n    if (isStarted) speechRecognition.start();\n  }\n\n  const start = () => {\n    if (isStarted) return\n    console.log('recognition started')\n    finalTranscript = ''\n    isStarted = true;\n    speechRecognition.start();\n  }\n\n  const stop = () => {\n    if (!isStarted) return\n    console.log('recognition stoped')\n    finalTranscript = ''\n    isStarted = false;\n    speechRecognition.stop();\n  }\n\n  const setCallback = (callback) => {\n    onUpdateCallback = callback\n  }\n\n  return { start, stop, setCallback }\n}\n\nexport { recordAudio, recognition }\n","import React, { useState, useCallback } from 'react';\nimport './App.css';\nimport { recordAudio, recognition } from './utils'\n\nfunction App() {\n  const [transcript, setTranscript] = useState('твыыорывола')\n  const [r, setR] = useState()\n  const [recogn, setRecogn] = useState(recognition())\n\n\n\n  const handlerStart = useCallback(async () => {\n    recordAudio().then(i => {\n      setR(i)\n      i.start()\n      recogn.start()\n    })\n  }, [recogn])\n\n  const handlerStop = useCallback(() => {\n\n    recogn.stop()\n    r.stop()\n\n  }, [r, recogn])\n\n  const onRecognUpdate = useCallback(async (final = '', interm = '') => {\n    let audio\n    setTranscript(final)\n    console.log(final)\n    if (final.includes('да')) {\n      console.log('match!!!')\n      recogn.stop()\n      audio = await r.stop()\n      audio.audio.onended = (event) => {\n        handlerStart()\n      };\n      audio.play()\n    }\n  }, [handlerStart, r, recogn])\n\n  recogn.setCallback(onRecognUpdate)\n\n  return (\n    <div className=\"App\">\n      <button className=\"button\" onClick={handlerStart}>Start</button>\n      <button className=\"button\" onClick={handlerStop}>Stop</button>\n      <hr />\n      <textarea className=\"text\" readOnly value={transcript}></textarea>\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n  // [::1] is the IPv6 localhost address.\n  window.location.hostname === '[::1]' ||\n  // 127.0.0.1/8 is considered localhost for IPv4.\n  window.location.hostname.match(\n    /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n  )\n);\n\nexport function register(config) {\n  if (\n    // process.env.NODE_ENV === 'production' &&\n    'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n            'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.register();\n"],"sourceRoot":""}